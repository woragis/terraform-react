name: 'Terraform React Deploy To AWS'
description: 'Deploy a React app using Terraform and S3'

inputs:
  project-name:
    description: 'The project name used for naming resources and tags'
    required: true

  terraform-dir:
    description: 'Directory where the Terraform code is located'
    required: true

  aws-region:
    description: 'AWS region for deployment'
    required: false
    default: 'us-east-1'

  environment:
    description: 'Deployment environment (e.g., dev, prod, staging)'
    required: false
    default: 'dev'

  s3-bucket-name:
    description: 'Custom S3 bucket name'
    required: false
    default: 'null'

  logging-bucket-name:
    description: 'Custom logging bucket name'
    required: false
    default: 'null'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws-region }}

    - name: Determine Environment from Branch
      id: env
      run: |
        case ${GITHUB_REF_NAME} in
          "dev"|"develop") echo "environment=dev" >> $GITHUB_ENV ;;
          "prod"|"main") echo "environment=prod" >> $GITHUB_ENV ;;
          "staging") echo "environment=staging" >> $GITHUB_ENV ;;
          *) echo "environment=dev" >> $GITHUB_ENV ;;  # Default to dev for other branches
        esac
      shell: bash

    - name: Terraform Init
      run: terraform init
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}
      env:
        TF_LOG: INFO

    - name: Terraform Import Existing Buckets
      shell: bash
      run: |
        terraform import aws_s3_bucket.static_site ${{ inputs.project-name }}-${{ env.environment }}-s3 || true
        terraform import aws_s3_bucket.logging_bucket ${{ inputs.project-name }}-${{ env.environment }}-logs || true
      working-directory: ${{ inputs.terraform-dir }}

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var "project_name=${{ inputs.project-name }}" \
          -var "aws_region=${{ inputs.aws-region }}" \
          -var "environment=${{ env.environment }}" \
          -var "s3_bucket_name=${{ inputs.s3-bucket-name }}" \
          -var "logging_bucket_name=${{ inputs.logging-bucket-name }}" \
          -out=tfplan
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Terraform Apply with Retry
      id: apply
      continue-on-error: true
      run: |
        for attempt in {1..5}; do
          if terraform apply -auto-approve tfplan; then
            echo "Terraform apply succeeded on attempt $attempt"
            echo "apply_success=true" >> $GITHUB_ENV
            break
          else
            echo "Attempt $attempt failed. Retrying in 120 seconds..."
            sleep 120
            if [ $attempt -eq 5 ]; then
              echo "Terraform apply failed after 5 attempts"
              echo "apply_success=false" >> $GITHUB_ENV
              exit 1
            fi
          fi
        done
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Terraform Destroy on Failure
      if: env.apply_success == 'false'
      run: |
        echo "Cleaning up resources with terraform destroy..."
        terraform destroy -auto-approve \
          -var "project_name=${{ inputs.project-name }}" \
          -var "aws_region=${{ inputs.aws-region }}" \
          -var "environment=${{ env.environment }}" \
          -var "s3_bucket_name=${{ inputs.s3-bucket-name }}" \
          -var "logging_bucket_name=${{ inputs.logging-bucket-name }}"
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Get Terraform Outputs
      if: env.apply_success == 'true'
      id: outputs
      run: |
        echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
        echo "s3_bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT

        echo "logging_bucket_name=$(terraform output -raw logging_bucket_name)" >> $GITHUB_ENV
        echo "logging_bucket_name=$(terraform output -raw logging_bucket_name)" >> $GITHUB_OUTPUT

        echo "website_endpoint=$(terraform output -raw website_endpoint)" >> $GITHUB_ENV
        echo "website_endpoint=$(terraform output -raw website_endpoint)" >> $GITHUB_OUTPUT

      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Notify on Timeout or Failure
      if: failure() || cancelled()
      run: |
        echo "Deployment failed or timed out. Check AWS status and logs."
      shell: bash

outputs:
  s3_bucket_name:
    description: 'The name of the S3 bucket created or used'
    value: ${{ steps.outputs.outputs.s3_bucket_name }}
  logging_bucket_name:
    description: 'The name of the S3 bucket created for logging'
    value: ${{ steps.outputs.outputs.logging_bucket_name }}
  website_endpoint:
    description: 'S3 static website endpoint'
    value: ${{ steps.outputs.outputs.website_endpoint }}
